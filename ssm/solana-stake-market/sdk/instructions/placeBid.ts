/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category PlaceBid
 * @category generated
 */
export type PlaceBidInstructionArgs = {
  rate: beet.bignum
  amount: beet.bignum
}
/**
 * @category Instructions
 * @category PlaceBid
 * @category generated
 */
export const placeBidStruct = new beet.BeetArgsStruct<
  PlaceBidInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['rate', beet.u64],
    ['amount', beet.u64],
  ],
  'PlaceBidInstructionArgs'
)
/**
 * Accounts required by the _placeBid_ instruction
 *
 * @property [_writable_, **signer**] user
 * @property [_writable_] bid
 * @property [_writable_] bidVault
 * @property [_writable_] orderBook
 * @category Instructions
 * @category PlaceBid
 * @category generated
 */
export type PlaceBidInstructionAccounts = {
  user: web3.PublicKey
  bid: web3.PublicKey
  bidVault: web3.PublicKey
  orderBook: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const placeBidInstructionDiscriminator = [
  238, 77, 148, 91, 200, 151, 92, 146,
]

/**
 * Creates a _PlaceBid_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category PlaceBid
 * @category generated
 */
export function createPlaceBidInstruction(
  accounts: PlaceBidInstructionAccounts,
  args: PlaceBidInstructionArgs,
  programId = new web3.PublicKey('sSmYaKe6tj5VKjPzHhpakpamw1PYoJFLQNyMJD3PU37')
) {
  const [data] = placeBidStruct.serialize({
    instructionDiscriminator: placeBidInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.user,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.bid,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.bidVault,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.orderBook,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
